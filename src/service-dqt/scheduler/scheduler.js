import schedule from "node-schedule";
import fs from "fs";
import { readGroupSettings, writeGroupSettings } from "../../utils/io-json.js";
import { MessageType } from "../../api-zalo/models/Message.js";
import { handleRandomChartZingMp3 } from "../api-crawl/music/zingmp3.js";
import {
  getRandomVideoFromArray,
  searchVideoTiktok,
} from "../api-crawl/tiktok/tiktok-service.js";
import { sendRandomGirlVideo } from "../chat-zalo/chat-special/send-video/send-video.js";
import {
  getPlansSoonDeadline,
  setPlanRemindedSoon,
} from "../../database/plan.js";
import { sendMessageState } from "../chat-zalo/chat-style/chat-style.js";
import moment from "moment-timezone";

const scheduledTasks = [
  {
    cronExpression: "5 3 * * *",
    task: async (api) => {
      const caption = `> SendTask 03:05 <\nNg√†y m·ªõi ch√∫c c√°c b·∫°n may m·∫Øn!\n\n`;
      const timeToLive = 1000 * 60 * 60 * 3;
      await sendTaskMusic(api, caption, timeToLive);
    },
  },
  {
    cronExpression: "5 6 * * *",
    task: async (api) => {
      const caption =
        `> SendTask 06:05 <\nTh·ª©c d·∫≠y cho m·ªôt ng√†y m·ªõi\nƒë·∫ßy nƒÉng l∆∞·ª£ng th√¥i n√†o!` +
        `\n\nƒê√≥n b√¨nh minh ng√†y m·ªõi c√πng t·ªõ nh√©!!!`;
      const timeToLive = 1000 * 60 * 60 * 3;
      await sendTaskVideo(
        api,
        caption,
        timeToLive,
        `ng·∫Øm b√¨nh minh chill ${Date.now()}`
      );
    },
  },
  {
    cronExpression: "5 9 * * *",
    task: async (api) => {
      const caption =
        `> SendTask 09:05 <\nCh√†o bu·ªïi s√°ng\nc√πng ƒë√≥n n·∫Øng ·∫•m su∆°ng m∆∞a nh√©!` +
        `\n\nGi·∫£i tr√≠ m·ªôt ch√∫t ƒë·ªÉ b·ªõt cƒÉng th·∫≥ng th√¥i n√†o!!!`;
      const timeToLive = 1000 * 60 * 60 * 3;
      await sendTaskVideo(
        api,
        caption,
        timeToLive,
        `nh·∫°c chill c·∫£nh ƒë·∫πp ${Date.now()}`
      );
    },
  },
  {
    cronExpression: "5 10 * * *",
    task: async (api) => {
      const caption =
        `> SendTask 10:05 <\nCh√†o m·ªôt bu·ªïi tr∆∞a ƒë·∫ßy nƒÉng l∆∞·ª£ng!` +
        `\n\nCung c·∫•p vitamin g√°i cho anh em ƒë√¢y!!!`;
      const timeToLive = 1000 * 60 * 60 * 1;
      await sendTaskGirlVideo(api, caption, timeToLive);
    },
  },
  {
    cronExpression: "5 11 * * *",
    task: async (api) => {
      const caption =
        `> SendTask 11:05 <\nCh√†o m·ªôt bu·ªïi tr∆∞a ƒë·∫ßy nƒÉng l∆∞·ª£ng!` +
        `\n\nCung c·∫•p vitamin g√°i c·ª±c sexy cho anh em ƒë√¢y!!!`;
      const timeToLive = 1000 * 60 * 60 * 1;
      await sendTaskGirlVideo(api, caption, timeToLive, "sexy");
    },
  },
  {
    cronExpression: "5 12 * * *",
    task: async (api) => {
      const caption =
        `> SendTask 12:05 <\nCh√†o m·ªôt bu·ªïi tr∆∞a ƒë·∫ßy nƒÉng l∆∞·ª£ng!` +
        `\n\nGi·∫£i tr√≠ v·ªõi n·ªØ cosplay cho anh em ƒë√¢y!!!`;
      const timeToLive = 1000 * 60 * 60 * 1;
      await sendTaskGirlVideo(api, caption, timeToLive, "cosplay");
    },
  },
  {
    cronExpression: "5 13 * * *",
    task: async (api) => {
      const caption =
        `> SendTask 13:05 <\nCh√†o m·ªôt bu·ªïi tr∆∞a ƒë·∫ßy nƒÉng l∆∞·ª£ng!` +
        `\n\nGi·∫£i tr√≠ anime cho b·ªõt cƒÉng n√£o anh em nh√©!!!`;
      const timeToLive = 1000 * 60 * 60 * 1;
      await sendTaskGirlVideo(api, caption, timeToLive, "anime");
    },
  },
  {
    cronExpression: "5 14 * * *",
    task: async (api) => {
      const caption =
        `> SendTask 14:05 <\nCh√†o m·ªôt bu·ªïi tr∆∞a ƒë·∫ßy nƒÉng l∆∞·ª£ng!` +
        `\n\nCung c·∫•p vitamin g√°i cho anh em ƒë√¢y!!!`;
      const timeToLive = 1000 * 60 * 60 * 1;
      await sendTaskGirlVideo(api, caption, timeToLive);
    },
  },
  {
    cronExpression: "5 15 * * *",
    task: async (api) => {
      const caption =
        `> SendTask 15:05 <\nCh√†o m·ªôt bu·ªïi x·∫ø chi·ªÅu ƒë·∫ßy nƒÉng l∆∞·ª£ng!` +
        `\n\nCung c·∫•p vitamin g√°i c·ª±c sexy cho anh em ƒë√¢y!!!`;
      const timeToLive = 1000 * 60 * 60 * 1;
      await sendTaskGirlVideo(api, caption, timeToLive, "sexy");
    },
  },
  {
    cronExpression: "5 16 * * *",
    task: async (api) => {
      const caption =
        `> SendTask 16:05 <\nCh√†o m·ªôt bu·ªïi x·∫ø chi·ªÅu ƒë·∫ßy nƒÉng l∆∞·ª£ng!` +
        `\n\nGi·∫£i tr√≠ v·ªõi n·ªØ cosplay cho anh em ƒë√¢y!!!`;
      const timeToLive = 1000 * 60 * 60 * 1;
      await sendTaskGirlVideo(api, caption, timeToLive, "cosplay");
    },
  },
  {
    cronExpression: "5 17 * * *",
    task: async (api) => {
      const caption =
        `> SendTask 17:05 <\nCh√∫c bu·ªïi chi·ªÅu th·∫≠t chill v√† vui v·∫ª nh√©!` +
        `\n\nƒê√≥n ho√†ng h√¥n √°nh chi·ªÅu t√† th√¥i n√†o!!!`;
      const timeToLive = 1000 * 60 * 60 * 2;
      await sendTaskVideo(
        api,
        caption,
        timeToLive,
        `ng·∫Øm ho√†ng h√¥n chill ${Date.now()}`
      );
    },
  },
  {
    cronExpression: "5 19 * * *",
    task: async (api) => {
      const caption =
        `> SendTask 19:05 <\nCh√∫c c√°c b·∫°n m·ªôt bu·ªïi t·ªëi vui v·∫ª b√™n gia ƒë√¨nh!` +
        `\n\nTh∆∞ gi√£n cu·ªëi ng√†y th√¥i n√†o!!!`;
      const timeToLive = 1000 * 60 * 60 * 1;
      await sendTaskVideo(api, caption, timeToLive, "√¢m nh·∫°c nh·∫π nh√†ng");
    },
  },
  {
    cronExpression: "5 20 * * *",
    task: async (api) => {
      const caption =
        `> SendTask 20:05 <\nGi·∫£i tr√≠ b·∫±ng 1 b√†i nh·∫°c` +
        `\ncho th·ªùi gian t·ªânh t√°o nh·∫•t trong ng√†y!\n\n`;
      const timeToLive = 1000 * 60 * 60 * 2;
      await sendTaskMusic(api, caption, timeToLive);
    },
  },
  {
    cronExpression: "5 22 * * *",
    task: async (api) => {
      const caption = `> SendTask 22:05 <\nCh√∫c c√°c b·∫°n ng·ªß ngon!\n\n`;
      const timeToLive = 1000 * 60 * 60 * 5;
      await sendTaskMusic(api, caption, timeToLive);
    },
  },
];

scheduledTasks.push({
  cronExpression: "* * * * *", // m·ªói 1 ph√∫t
  task: async (api) => {
    const now = moment().tz("Asia/Ho_Chi_Minh");
    const soon = now.clone().add(30, "minutes");
    const nowStr = now.format("YYYY-MM-DD HH:mm:ss");
    const soonStr = soon.format("YYYY-MM-DD HH:mm:ss");
    console.log("[PLAN SCHEDULER] Node.js now:", nowStr, "soon:", soonStr);
    const plans = await getPlansSoonDeadline(nowStr, soonStr);
    console.log(
      `[PLAN SCHEDULER] ƒêang ki·ªÉm tra c√°c plan s·∫Øp t·ªõi h·∫°n (${plans.length} plan c·∫ßn nh·∫Øc)`
    );
    for (const plan of plans) {
      // Log chi ti·∫øt plan
      console.log(
        `[PLAN REMINDER] Nh·∫Øc nh·ªü plan #${plan.id} cho user ${plan.user_id} (group ${plan.group_id}) - deadline: ${plan.deadline}`
      );
      // Nh·∫Øn ri√™ng
      try {
        if (plan.user_id && plan.user_id !== "0") {
          const memberName =
            plan.user_name && plan.user_name.trim()
              ? plan.user_name
              : "Th√†nh vi√™n";
          const deadlineVN = moment(plan.deadline)
            .tz("Asia/Ho_Chi_Minh")
            .format("HH:mm [ng√†y] DD/MM/YYYY");
          const content = `üîî [NH·∫ÆC NH·ªû PLAN]\nüë§ ${memberName} c√≤n 30 ph√∫t ƒë·ªÉ ho√†n th√†nh nhi·ªám v·ª•:\nüìã "${plan.content}"\nüï∞Ô∏è Deadline: ${deadlineVN}`;
          await api.sendMessage(
            {
              msg: content,
            },
            plan.user_id,
            MessageType.DirectMessage
          );
          console.log(
            `[PLAN REMINDER] ƒê√£ g·ª≠i nh·∫Øc nh·ªü ri√™ng cho user ${plan.user_id}`
          );
        } else {
          console.error(`[PLAN REMINDER] user_id kh√¥ng h·ª£p l·ªá:`, plan.user_id);
        }
      } catch (e) {
        console.error(
          `[PLAN REMINDER] L·ªói khi g·ª≠i nh·∫Øc nh·ªü ri√™ng cho user ${plan.user_id}:`,
          e
        );
        // N·∫øu l·ªói code 127, g·ª≠i th√¥ng b√°o v√†o group
        if (e.code === 127) {
          await api.sendMessage(
            {
              msg: `‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ri√™ng cho ${plan.user_name}. Vui l√≤ng nh·∫Øn tin cho bot tr∆∞·ªõc ƒë·ªÉ nh·∫≠n nh·∫Øc nh·ªü ri√™ng!`,
            },
            plan.group_id,
            MessageType.GroupMessage
          );
        }
      }
      // Nh·∫Øn group (tag user nh·∫≠n plan)
      try {
        const memberName = plan.user_name || `ID:${plan.user_id}`;
        const deadlineVN = moment(plan.deadline)
          .tz("Asia/Ho_Chi_Minh")
          .format("HH:mm [ng√†y] DD/MM/YYYY");
        const content = `üîî [NH·∫ÆC NH·ªû PLAN]\nüë§ ${memberName} c√≤n 30 ph√∫t ƒë·ªÉ ho√†n th√†nh nhi·ªám v·ª•:\nüìã "${plan.content}"\nüï∞Ô∏è Deadline: ${deadlineVN}`;
        const mention = [
          {
            pos: content.indexOf(memberName),
            uid: plan.user_id,
            len: memberName.length,
          },
        ];
        await api.sendMessage(
          {
            msg: content,
            mentions: mention,
          },
          plan.group_id,
          MessageType.GroupMessage
        );
        console.log(`[PLAN REMINDER] ƒê√£ g·ª≠i nh·∫Øc nh·ªü group ${plan.group_id}`);
      } catch (e) {
        console.error(
          `[PLAN REMINDER] L·ªói khi g·ª≠i nh·∫Øc nh·ªü group ${plan.group_id}:`,
          e
        );
      }
      // ƒê√°nh d·∫•u ƒë√£ nh·∫Øc
      await setPlanRemindedSoon(plan.id);
    }
  },
});

async function sendTaskGirlVideo(api, caption, timeToLive, type = "default") {
  const groupSettings = readGroupSettings();
  for (const threadId of Object.keys(groupSettings)) {
    if (groupSettings[threadId].sendTask) {
      try {
        const message = {
          threadId: threadId,
          type: MessageType.GroupMessage,
        };
        await sendRandomGirlVideo(api, message, caption, type, timeToLive);
      } catch (error) {
        console.error(`L·ªói khi g·ª≠i video g√°i in ${threadId}:`, error);
        if (error.message && error.message.includes("Kh√¥ng t·ªìn t·∫°i")) {
          groupSettings[threadId].sendTask = false;
          writeGroupSettings(groupSettings);
        }
      }
    }
  }
}

async function sendTaskVideo(api, caption, timeToLive, query) {
  const chillListVideo = await searchVideoTiktok(query);
  if (chillListVideo) {
    const groupSettings = readGroupSettings();
    let captionFinal = `${caption}`;
    for (const threadId of Object.keys(groupSettings)) {
      if (groupSettings[threadId].sendTask) {
        try {
          const message = {
            threadId: threadId,
            type: MessageType.GroupMessage,
          };
          const videoUrl = await getRandomVideoFromArray(
            api,
            message,
            chillListVideo
          );
          await api.sendVideo({
            videoUrl: videoUrl,
            threadId: message.threadId,
            threadType: message.type,
            message: {
              text: captionFinal,
            },
            ttl: timeToLive,
          });
        } catch (error) {
          console.error(`L·ªói khi g·ª≠i video tiktok in ${threadId}:`, error);
          if (error.message && error.message.includes("Kh√¥ng t·ªìn t·∫°i")) {
            groupSettings[threadId].sendTask = false;
            writeGroupSettings(groupSettings);
          }
        }
      }
    }
  }
}

async function sendTaskMusic(api, caption, timeToLive) {
  const groupSettings = readGroupSettings();
  for (const threadId of Object.keys(groupSettings)) {
    if (groupSettings[threadId].sendTask) {
      try {
        const message = {
          threadId: threadId,
          type: MessageType.GroupMessage,
        };
        await handleRandomChartZingMp3(api, message, caption, timeToLive);
      } catch (error) {
        console.error(`L·ªói khi g·ª≠i nh·∫°c in ${threadId}:`, error);
        if (error.message && error.message.includes("Kh√¥ng t·ªìn t·∫°i")) {
          groupSettings[threadId].sendTask = false;
          writeGroupSettings(groupSettings);
        }
      }
    }
  }
}

export async function initializeScheduler(api) {
  scheduledTasks.forEach((taskConfig) => {
    schedule.scheduleJob(taskConfig.cronExpression, () => {
      taskConfig.task(api).catch((error) => {
        console.error("L·ªói khi th·ª±c thi t√°c v·ª• ƒë·ªãnh k·ª≥:", error);
      });
    });
  });
}
